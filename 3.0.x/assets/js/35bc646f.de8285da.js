"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[5740],{1307:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=t(4848),r=t(8453);const o={},l=void 0,s={id:"Tutorials/Components/Core/Clipper",title:"Clipper",description:'window.open("https://thatopen.github.io/engine_components/examples/Clipper")} >Go Full Screen',source:"@site/docs/Tutorials/Components/Core/Clipper.mdx",sourceDirName:"Tutorials/Components/Core",slug:"/Tutorials/Components/Core/Clipper",permalink:"/engine_past-docs/3.0.x/Tutorials/Components/Core/Clipper",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Classifier",permalink:"/engine_past-docs/3.0.x/Tutorials/Components/Core/Classifier"},next:{title:"Cullers",permalink:"/engine_past-docs/3.0.x/Tutorials/Components/Core/Cullers"}},a={},c=[{value:"\u2702\ufe0f Cutting our scene with planes",id:"\ufe0f-cutting-our-scene-with-planes",level:3},{value:"\ud83c\udf0e Setting up a simple scene",id:"-setting-up-a-simple-scene",level:3},{value:"\ud83c\udfb2 Creating a Cube Mesh",id:"-creating-a-cube-mesh",level:3},{value:"\u26a1 Initializing the Raycaster",id:"-initializing-the-raycaster",level:3},{value:"\u2699\ufe0f Adding the Clipper",id:"\ufe0f-adding-the-clipper",level:3},{value:"\ud83e\udd1d Performing Clipping Events",id:"-performing-clipping-events",level:3},{value:"\ud83e\uddf9 Deleting the Clipping Planes",id:"-deleting-the-clipping-planes",level:3},{value:"\u23f1\ufe0f Measuring the performance (optional)",id:"\ufe0f-measuring-the-performance-optional",level:3},{value:"\ud83e\udde9 Adding some UI",id:"-adding-some-ui",level:3},{value:"\ud83c\udf89 Wrap up",id:"-wrap-up",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)("div",{style:{position:"relative"},children:[(0,i.jsx)("iframe",{src:"https://thatopen.github.io/engine_components/examples/Clipper"}),(0,i.jsx)("button",{class:"full-screen-btn",onClick:()=>window.open("https://thatopen.github.io/engine_components/examples/Clipper"),children:"Go Full Screen"})]}),"\n",(0,i.jsx)(n.admonition,{title:"Source",type:"info",children:(0,i.jsxs)(n.p,{children:["Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,i.jsx)(n.a,{href:"https://github.com/ThatOpen/engine_components/blob/e444737d33d6823121001fd63a06bdcf80cf5ddd/packages/core/src/core/Clipper/example.ts",children:"here"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"\ufe0f-cutting-our-scene-with-planes",children:"\u2702\ufe0f Cutting our scene with planes"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The Clipping Tool is a powerful feature in 3D modelling that helps you dissect 3D objects. Clipping Tool is useful for inspecting and analyzing objects in detail.\ud83d\udcaa"}),"\n",(0,i.jsx)(n.admonition,{title:"Clipping?",type:"tip",children:(0,i.jsx)(n.p,{children:'Clipping is the process of "cutting" a 3D object by creating a plane. That way, we can have a bird view of the inside of a BIM model.'})}),"\n",(0,i.jsx)(n.p,{children:"In this tutorial, we will import:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Three.js"})," to get some 3D entities for our app."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@thatopen/components"})," to set up the barebone of our app."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@thatopen/ui"})," to add some simple and cool UI menus."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Stats.js"})," (optional) to measure the performance of our app."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'import * as THREE from "three";\r\nimport Stats from "stats.js";\r\nimport * as BUI from "@thatopen/ui";\r\nimport * as OBC from "@thatopen/components";\n'})}),"\n",(0,i.jsx)(n.h3,{id:"-setting-up-a-simple-scene",children:"\ud83c\udf0e Setting up a simple scene"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"We will start by creating a simple scene with a camera and a renderer. If you don't know how to set up a scene, you can check the Worlds tutorial."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const container = document.getElementById("container")!;\r\n\r\nconst components = new OBC.Components();\r\n\r\nconst worlds = components.get(OBC.Worlds);\r\nconst world = worlds.create<\r\n  OBC.SimpleScene,\r\n  OBC.SimpleCamera,\r\n  OBC.SimpleRenderer\r\n>();\r\n\r\nworld.scene = new OBC.SimpleScene(components);\r\nworld.renderer = new OBC.SimpleRenderer(components, container);\r\nworld.camera = new OBC.SimpleCamera(components);\r\n\r\ncomponents.init();\r\n\r\nworld.camera.controls.setLookAt(10, 10, 10, 0, 0, 0);\r\n\r\nworld.scene.setup();\n'})}),"\n",(0,i.jsx)(n.p,{children:"We'll make the background of the scene transparent so that it looks good in our docs page, but you don't have to do that in your app!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"world.scene.three.background = null;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"-creating-a-cube-mesh",children:"\ud83c\udfb2 Creating a Cube Mesh"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Let's start by adding a Cube, which we can dissect. We will create a ",(0,i.jsx)(n.a,{href:"https://threejs.org/docs/index.html?q=box#api/en/geometries/BoxGeometry",children:"Cube"})," with ",(0,i.jsx)(n.code,{children:"3x3x3"})," dimensions and use purple color for the material."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const cubeGeometry = new THREE.BoxGeometry(3, 3, 3);\r\nconst cubeMaterial = new THREE.MeshStandardMaterial({ color: "#6528D7" });\r\nconst cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\r\ncube.position.set(0, 1.5, 0);\r\nworld.scene.three.add(cube);\r\nworld.meshes.add(cube);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"-initializing-the-raycaster",children:"\u26a1 Initializing the Raycaster"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"We also need to initialize the Raycaster for this world so that the position of the mouse is tracked from the very first moment we use the clipping planes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const casters = components.get(OBC.Raycasters);\r\ncasters.get(world);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"\ufe0f-adding-the-clipper",children:"\u2699\ufe0f Adding the Clipper"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Here comes the interesting part, we will add a Simple Clipper to our scene. You can instantiate it, but it's always better to use the ",(0,i.jsx)(n.code,{children:"components.get(OBC.Clipper)"})," method to get it. All components are meant to be used as a singleton per components instance, and using this system to get a component makes sure this happens."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const clipper = components.get(OBC.Clipper);\n"})}),"\n",(0,i.jsxs)(n.admonition,{title:"Controllign the plane",type:"info",children:[(0,i.jsxs)(n.p,{children:["Each plane generated by the clipper can be controlled using the built-in 3D arrows. You can control the activation and visibility of each plane using ",(0,i.jsx)(n.code,{children:"plane.enabled"})," and ",(0,i.jsx)(n.code,{children:"plane.visible"}),". To control the activation and visibility of all planes, use ",(0,i.jsx)(n.code,{children:"clipper.enabled"})," and ",(0,i.jsx)(n.code,{children:"clipper.visible"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"clipper.enabled = true;\n"})}),(0,i.jsx)(n.h3,{id:"-performing-clipping-events",children:"\ud83e\udd1d Performing Clipping Events"}),(0,i.jsx)(n.hr,{}),(0,i.jsxs)(n.p,{children:["Now, we want a way to create a clipping plane on demand. You can do it with a ",(0,i.jsx)(n.code,{children:"Single Click"})," or ",(0,i.jsx)(n.code,{children:"Double Click"})," of a mouse. For this tutorial, we will use ",(0,i.jsx)(n.code,{children:"Double Click"}),". This will cast a ray from the mouse position to the scene and check if the ray intersects with any of the 3D objects. If it does, it will create a new clipping plane in the point of intersection."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"container.ondblclick = () => {\r\n  if (clipper.enabled) {\r\n    clipper.create(world);\r\n  }\r\n};\n"})}),(0,i.jsx)(n.admonition,{title:"Raycaster under the hood \ud83c\udfa9",type:"info",children:(0,i.jsx)(n.p,{children:"We use the Raycaster to determine if the intersection has occurred. The clipper places a plane after detecting the face on which the mouse was clicked. \ud83d\ude0e"})})]}),"\n",(0,i.jsx)(n.h3,{id:"-deleting-the-clipping-planes",children:"\ud83e\uddf9 Deleting the Clipping Planes"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["Now that we know how to make multiple clipping planes, we must also know how to delete them when necessary. Clipping planes can be removed using ",(0,i.jsx)(n.code,{children:"clipper.delete(world)"})," (which will pick the first plane under the mouse using the raycaster in the specified world) or ",(0,i.jsx)(n.code,{children:"clipper.delete(world, plane)"})," (which will delete a specific clipping plane)."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'window.onkeydown = (event) => {\r\n  if (event.code === "Delete" || event.code === "Backspace") {\r\n    if (clipper.enabled) {\r\n      clipper.delete(world);\r\n    }\r\n  }\r\n};\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Delete all the Clipping Planes",type:"tip",children:(0,i.jsxs)(n.p,{children:["\u274e If you want to safely delete all the clipping planes that were created you can simply call ",(0,i.jsx)(n.code,{children:"clipper.deleteAll()"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"\ufe0f-measuring-the-performance-optional",children:"\u23f1\ufe0f Measuring the performance (optional)"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["We'll use the ",(0,i.jsx)(n.a,{href:"https://github.com/mrdoob/stats.js",children:"Stats.js"})," to measure the performance of our app. We will add it to the top left corner of the viewport. This way, we'll make sure that the memory consumption and the FPS of our app are under control."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const stats = new Stats();\r\nstats.showPanel(2);\r\ndocument.body.append(stats.dom);\r\nstats.dom.style.left = "0px";\r\nstats.dom.style.zIndex = "unset";\r\nworld.renderer.onBeforeUpdate.add(() => stats.begin());\r\nworld.renderer.onAfterUpdate.add(() => stats.end());\n'})}),"\n",(0,i.jsx)(n.h3,{id:"-adding-some-ui",children:"\ud83e\udde9 Adding some UI"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["We will use the ",(0,i.jsx)(n.code,{children:"@thatopen/ui"})," library to add some simple and cool UI elements to our app. First, we need to call the ",(0,i.jsx)(n.code,{children:"init"})," method of the ",(0,i.jsx)(n.code,{children:"BUI.Manager"})," class to initialize the library:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"BUI.Manager.init();\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now we will create some UI elements and bind them to some of the controls of the clipper, like activation, visibility, size, color, etc. For more information about the UI library, you can check the specific documentation for it!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const panel = BUI.Component.create<BUI.PanelSection>(() => {\r\n  return BUI.html`\r\n    <bim-panel label="Clipper Tutorial" class="options-menu">\r\n          <bim-panel-section collapsed label="Commands">\r\n      \r\n        <bim-label>Double click: Create clipping plane</bim-label>\r\n        <bim-label>Delete key: Delete clipping plane</bim-label>\r\n       \r\n        \r\n      </bim-panel-section>\r\n      <bim-panel-section collapsed label="Others"">\r\n          \r\n        <bim-checkbox label="Clipper enabled" checked \r\n          @change="${({ target }: { target: BUI.Checkbox }) => {\r\n            clipper.config.enabled = target.value;\r\n          }}">\r\n        </bim-checkbox>\r\n        \r\n        <bim-checkbox label="Clipper visible" checked \r\n          @change="${({ target }: { target: BUI.Checkbox }) => {\r\n            clipper.config.visible = target.value;\r\n          }}">\r\n        </bim-checkbox>\r\n      \r\n        <bim-color-input \r\n          label="Planes Color" color="#202932" \r\n          @input="${({ target }: { target: BUI.ColorInput }) => {\r\n            clipper.config.color = new THREE.Color(target.color);\r\n          }}">\r\n        </bim-color-input>\r\n        \r\n        <bim-number-input \r\n          slider step="0.01" label="Planes opacity" value="0.2" min="0.1" max="1"\r\n          @change="${({ target }: { target: BUI.NumberInput }) => {\r\n            clipper.config.opacity = target.value;\r\n          }}">\r\n        </bim-number-input>\r\n        \r\n        <bim-number-input \r\n          slider step="0.1" label="Planes size" value="5" min="2" max="10"\r\n          @change="${({ target }: { target: BUI.NumberInput }) => {\r\n            clipper.config.size = target.value;\r\n          }}">\r\n        </bim-number-input>\r\n        \r\n        <bim-button \r\n          label="Delete all" \r\n          @click="${() => {\r\n            clipper.deleteAll();\r\n          }}">  \r\n        </bim-button>        \r\n        \r\n        <bim-button \r\n          label="Rotate cube" \r\n          @click="${() => {\r\n            cube.rotation.x = 2 * Math.PI * Math.random();\r\n            cube.rotation.y = 2 * Math.PI * Math.random();\r\n            cube.rotation.z = 2 * Math.PI * Math.random();\r\n          }}">  \r\n        </bim-button>\r\n       \r\n        \r\n      </bim-panel-section>\r\n    </bim-panel>\r\n    `;\r\n});\r\n\r\ndocument.body.append(panel);\n'})}),"\n",(0,i.jsx)(n.p,{children:"And we will make some logic that adds a button to the screen when the user is visiting our app from their phone, allowing to show or hide the menu. Otherwise, the menu would make the app unusable."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const button = BUI.Component.create<BUI.PanelSection>(() => {\r\n  return BUI.html`\r\n      <bim-button class="phone-menu-toggler" icon="solar:settings-bold"\r\n        @click="${() => {\r\n          if (panel.classList.contains("options-menu-visible")) {\r\n            panel.classList.remove("options-menu-visible");\r\n          } else {\r\n            panel.classList.add("options-menu-visible");\r\n          }\r\n        }}">\r\n      </bim-button>\r\n    `;\r\n});\r\n\r\ndocument.body.append(button);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"-wrap-up",children:"\ud83c\udf89 Wrap up"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"That's it! You have created your first clipping planes to cut your 3D models. You can now play with the inputs to see how the planes change and adapt them to the look of your app! If you liked planes, don't forget to check out the Edges Planes tutorial, who includes styles, edges and fills and much more."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var i=t(6540);const r={},o=i.createContext(r);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);