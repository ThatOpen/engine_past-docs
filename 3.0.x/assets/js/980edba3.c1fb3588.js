"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[655],{4089:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(4848),o=t(8453);const i={},r=void 0,l={id:"Tutorials/UserInterface/Core/Table/ExportingData",title:"ExportingData",description:'window.open("https://thatopen.github.io/engine_ui-components/examples/Table/ExportingData")} >Go Full Screen',source:"@site/docs/Tutorials/UserInterface/Core/Table/ExportingData.mdx",sourceDirName:"Tutorials/UserInterface/Core/Table",slug:"/Tutorials/UserInterface/Core/Table/ExportingData",permalink:"/3.0.x/Tutorials/UserInterface/Core/Table/ExportingData",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DataTransform",permalink:"/3.0.x/Tutorials/UserInterface/Core/Table/DataTransform"},next:{title:"LoadFunction",permalink:"/3.0.x/Tutorials/UserInterface/Core/Table/LoadFunction"}},s={},c=[{value:"Taking Your Data Elsewhere \u23ec",id:"taking-your-data-elsewhere-",level:3},{value:"\ud83d\udd96 Initializing the Library and Setting the Table",id:"-initializing-the-library-and-setting-the-table",level:3},{value:"Exporting Data \ud83d\udcc4",id:"exporting-data-",level:3},{value:"Copying Data to The Clipboard \ud83e\udd13",id:"copying-data-to-the-clipboard-",level:3},{value:"\ud83d\udd17 Putting Everything Together",id:"-putting-everything-together",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("div",{style:{position:"relative"},children:[(0,a.jsx)("iframe",{src:"https://thatopen.github.io/engine_ui-components/examples/Table/ExportingData"}),(0,a.jsx)("button",{class:"full-screen-btn",onClick:()=>window.open("https://thatopen.github.io/engine_ui-components/examples/Table/ExportingData"),children:"Go Full Screen"})]}),"\n",(0,a.jsx)(n.admonition,{title:"Source",type:"info",children:(0,a.jsxs)(n.p,{children:["Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,a.jsx)(n.a,{href:"https://github.com/ThatOpen/engine_ui-components/blob/85b30234e98ffa9e9882de2fee867a5e845fbe1f/packages/core/src/components/Table/examples/ExportingData/example.ts",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"taking-your-data-elsewhere-",children:"Taking Your Data Elsewhere \u23ec"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"There are some situations in which is convenient to export information from your table, because you probably want to process it further in other places. Well, exporting data with the bim-table component is extremely simple and you will learn how to do it!"}),"\n",(0,a.jsx)(n.h3,{id:"-initializing-the-library-and-setting-the-table",children:"\ud83d\udd96 Initializing the Library and Setting the Table"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"As always, let's first initialize the UI library. Remember you only have to do it once in your entire app."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'// You have to import from "@thatopen/ui"\nimport * as BUI from "../../../..";\n\nBUI.Manager.init();\n'})}),"\n",(0,a.jsx)(n.p,{children:"Once you have initialized the library, you can create a new table or get an existing from your HTML document. Let's create one programatically for this tutorial:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'type IfcElementsInfo = {\n  Class: string;\n  PredefinedType: string;\n  Name: string;\n  Description: string;\n  LoadBearing: boolean;\n  Area: number;\n};\n\nconst table = document.createElement("bim-table") as BUI.Table<IfcElementsInfo>;\ntable.expanded = true;\n\ntable.data = [\n  {\n    data: {\n      Class: "IfcWall",\n      PredefinedType: "EXTERNAL",\n      Name: "Exterior Wall",\n      Description: "Main structural exterior wall",\n      LoadBearing: true,\n      Area: 45.5,\n    },\n    children: [\n      {\n        data: {\n          Class: "IfcWindow",\n          PredefinedType: "STANDARD",\n          Name: "Office Window",\n          Description: "Double-pane office window",\n          LoadBearing: false,\n          Area: 3.6,\n        },\n      },\n    ],\n  },\n  {\n    data: {\n      Class: "IfcDoor",\n      PredefinedType: "SINGLE_SWING_RIGHT",\n      Name: "Entrance Door",\n      Description: "Main entrance door",\n      LoadBearing: false,\n      Area: 2.1,\n    },\n  },\n  {\n    data: {\n      Class: "IfcColumn",\n      PredefinedType: "ROUND",\n      Name: "Support Column",\n      Description: "Load-bearing column in lobby",\n      LoadBearing: true,\n      Area: 1.2,\n    },\n  },\n  {\n    data: {\n      Class: "IfcSlab",\n      PredefinedType: "FLOOR",\n      Name: "Main Floor Slab",\n      Description: "Primary floor slab for ground level",\n      LoadBearing: true,\n      Area: 150.0,\n    },\n  },\n];\n'})}),"\n",(0,a.jsx)(n.h3,{id:"exporting-data-",children:"Exporting Data \ud83d\udcc4"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"Exporting data from a bim-table is extremely simple, and just as the searching feature it can be done in very few lines of code. Now, talking about searching features, let's implement a searchbox really quick so you can also make queries and export the filtered information:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const searchBox = BUI.Component.create<BUI.TextInput>(() => {\n  const onInput = (e: Event) => {\n    const input = e.target;\n    if (!(input instanceof BUI.TextInput)) return;\n    table.queryString = input.value;\n  };\n\n  return BUI.html`\n   <bim-text-input @input=${onInput} placeholder="Search..."></bim-text-input> \n  `;\n});\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"If you want to know more about searching in tables, take a look at the Table Searching tutorial \ud83d\ude09 Also, when you query the table and export the data, the exported information will be the result of the filter."})}),"\n",(0,a.jsx)(n.p,{children:"Great! With the searchbox already implemented (not needed to export data), let's see how exporting works. The table includes a method to download the information right away in CSV, TSV or JSON; to make the export more dynamic, let's create a simple dropdown to choose the format and one text input to define the file name:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const formatDropdown = BUI.Component.create<BUI.Dropdown>(\n  () => BUI.html`\n    <bim-dropdown required style="flex: 0">\n      <bim-option label="CSV" value="csv" checked></bim-option>\n      <bim-option label="TSV" value="tsv"></bim-option>\n      <bim-option label="JSON" value="json"></bim-option>\n    </bim-dropdown> \n  `,\n);\n\nconst fileNameInput = BUI.Component.create<BUI.TextInput>(\n  () =>\n    BUI.html`<bim-text-input value="My Data" style="width: 4rem"></bim-text-input>`,\n);\n'})}),"\n",(0,a.jsx)(n.p,{children:"Then, it's time to create a simple button to download the information. We can proceed as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const downloadBtn = BUI.Component.create<BUI.Button>(() => {\n  const onClick = () => {\n    const format = formatDropdown.value[0] as "csv" | "tsv" | "json";\n    if (format === undefined) return;\n    const fileName =\n      fileNameInput.value.trim() !== "" ? fileNameInput.value : undefined;\n    table.downloadData(fileName, format);\n  };\n\n  return BUI.html`\n    <bim-button @click=${onClick} label="Download" style="flex: 0"></bim-button>\n  `;\n});\n'})}),"\n",(0,a.jsx)(n.p,{children:"Yes! As simple as that you are now able to download your data. Now, you may be wondering: what happens if I have nested data in my table? Well, it depends on you! By default, if you download the data in JSON the nestings will be there, so no problem at all. The situation is different when you export to CSV or TSV; in such case, by default the data will be exported flattened. However, you can modify the behavior and choose to include an extra column showing the indentation of each row based on its nesting position. To implement this in our table, let's create a very simple checkbox to toggle the functionality on and off:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const indentationCheckbox = BUI.Component.create(() => {\n  const onChange = (e: Event) => {\n    const input = e.target;\n    if (!(input instanceof BUI.Checkbox)) return;\n    // Indentation in text doesn\'t have effect if you export to JSON\n    table.indentationInText = input.checked;\n  };\n\n  return BUI.html`\n   <bim-checkbox @change=${onChange} label="Include Indentation" inverted></bim-checkbox> \n  `;\n});\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Great! Just give it a try in the example and download the data with ",(0,a.jsx)(n.code,{children:"Include Indentation"})," checked. You will notice a new column appears in the exported data showing the row indentation."]}),"\n",(0,a.jsx)(n.h3,{id:"copying-data-to-the-clipboard-",children:"Copying Data to The Clipboard \ud83e\udd13"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"I don't know about you, but in many situations I want to quickly copy some data and paste it somewhere else (cof cof, ChatGPT) to make something else without having to deal with files. While this is not exactly a feature of the bim-table, it can be implemented very easily like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const copyBtn = BUI.Component.create(() => {\n  const onClick = async () => {\n    const format = formatDropdown.value[0] as "csv" | "tsv" | "json";\n    if (format === undefined || format === "json") return;\n    await navigator.clipboard.writeText(table[format]);\n    window.alert("Table data copied as CSV in clipboard!");\n  };\n\n  return BUI.html`\n   <bim-button @click=${onClick} label="Copy to Clipboard" style="flex: 0"></bim-button> \n  `;\n});\n'})}),"\n",(0,a.jsx)(n.p,{children:"Very cool, isn't? You can now copy your values and paste them anywhere really easy."}),"\n",(0,a.jsx)(n.h3,{id:"-putting-everything-together",children:"\ud83d\udd17 Putting Everything Together"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"As everything is already setup, let's create a new component to hold everything and display them in the page. You can do it very easily as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const appContent = BUI.Component.create(\n  () => BUI.html`\n    <div style="display: flex; flex-direction: column; gap: 0.75rem; height: 100%;">\n      <div style="display: flex; gap: 0.5rem">\n        ${searchBox}\n        ${fileNameInput}\n        ${formatDropdown}\n        ${indentationCheckbox}\n        ${downloadBtn}\n        ${copyBtn}\n      </div> \n      ${table}\n    </div>\n  `,\n);\n\ndocument.body.append(appContent);\n'})}),"\n",(0,a.jsx)(n.p,{children:"Congratulations! You already know how to export data from your bim-table component and take it anywhere you want. Don't hesitate into watching more tutorials, they're all free! \ud83d\ude80"})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(6540);const o={},i=a.createContext(o);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);