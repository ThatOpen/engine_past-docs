"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[7928],{5563:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var s=l(4848),i=l(8453);const t={},r="NumberInput",d={id:"api/@thatopen/ui/classes/NumberInput",title:"NumberInput",description:"A custom number input web component for BIM applications. HTML tag: bim-number-input",source:"@site/docs/api/@thatopen/ui/classes/NumberInput.md",sourceDirName:"api/@thatopen/ui/classes",slug:"/api/@thatopen/ui/classes/NumberInput",permalink:"/3.0.x/api/@thatopen/ui/classes/NumberInput",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Manager",permalink:"/3.0.x/api/@thatopen/ui/classes/Manager"},next:{title:"Option",permalink:"/3.0.x/api/@thatopen/ui/classes/Option"}},a={},c=[{value:"Extends",id:"extends",level:2},{value:"Implements",id:"implements",level:2},{value:"Properties",id:"properties",level:2},{value:"icon?",id:"icon",level:3},{value:"Default",id:"default",level:4},{value:"Examples",id:"examples",level:4},{value:"label?",id:"label",level:3},{value:"Default",id:"default-1",level:4},{value:"Examples",id:"examples-1",level:4},{value:"Implementation of",id:"implementation-of",level:4},{value:"max?",id:"max",level:3},{value:"Default",id:"default-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"min?",id:"min",level:3},{value:"Default",id:"default-3",level:4},{value:"Examples",id:"examples-3",level:4},{value:"name?",id:"name",level:3},{value:"Default",id:"default-4",level:4},{value:"Examples",id:"examples-4",level:4},{value:"Implementation of",id:"implementation-of-1",level:4},{value:"pref?",id:"pref",level:3},{value:"Default",id:"default-5",level:4},{value:"Examples",id:"examples-5",level:4},{value:"sensitivity?",id:"sensitivity",level:3},{value:"Default",id:"default-6",level:4},{value:"Examples",id:"examples-6",level:4},{value:"slider",id:"slider",level:3},{value:"Default",id:"default-7",level:4},{value:"Examples",id:"examples-7",level:4},{value:"step?",id:"step",level:3},{value:"Default",id:"default-8",level:4},{value:"Examples",id:"examples-8",level:4},{value:"suffix?",id:"suffix",level:3},{value:"Default",id:"default-9",level:4},{value:"Examples",id:"examples-9",level:4},{value:"vertical",id:"vertical",level:3},{value:"Default",id:"default-10",level:4},{value:"Examples",id:"examples-10",level:4},{value:"styles",id:"styles",level:3},{value:"Overrides",id:"overrides",level:4},{value:"Accessors",id:"accessors",level:2},{value:"value",id:"value",level:3},{value:"Default",id:"default-11",level:4},{value:"Examples",id:"examples-11",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Methods",id:"methods",level:2},{value:"focus()",id:"focus",level:3},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides-1",level:4}];function u(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"numberinput",children:"NumberInput"}),"\n",(0,s.jsx)(n.p,{children:"A custom number input web component for BIM applications. HTML tag: bim-number-input"}),"\n",(0,s.jsx)(n.h2,{id:"extends",children:"Extends"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"LitElement"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implements",children:"Implements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/3.0.x/api/@thatopen/ui/interfaces/HasValue",children:(0,s.jsx)(n.code,{children:"HasValue"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/3.0.x/api/@thatopen/ui/interfaces/HasName",children:(0,s.jsx)(n.code,{children:"HasName"})})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(n.h3,{id:"icon",children:"icon?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"icon"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"icon"})," property allows specifying an icon identifier to be used within the number input component,\r\npotentially for decorative or instructional purposes. Changes to this property may affect the appearance\r\nor layout of the component, depending on how the icon is used within the component's template."]}),"\n",(0,s.jsx)(n.h4,{id:"default",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"undefined\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<bim-number-input icon="user-icon"></bim-number-input>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const numberInput = document.createElement('bim-number-input');\r\nnumberInput.icon = 'user-icon';\r\ndocument.body.appendChild(numberInput);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"label",children:"label?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"label"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"label"})," property is used to define a text label associated with the number input component.\r\nThis label can provide context or instructions to the user. When the label property changes,\r\nthe component updates to display the new label text."]}),"\n",(0,s.jsx)(n.h4,{id:"default-1",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"undefined\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-1",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<bim-number-input label="Enter your age"></bim-number-input>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const numberInput = document.createElement('bim-number-input');\r\nnumberInput.label = 'Enter your age';\r\ndocument.body.appendChild(numberInput);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"implementation-of",children:"Implementation of"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"HasName.label"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"max",children:"max?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"max"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"max"})," property defines the maximum value that can be entered in the number input component.\r\nIt is used to validate the input and ensure that the value does not exceed this maximum.\r\nWhen the property changes, the component enforces the new maximum value."]}),"\n",(0,s.jsx)(n.h4,{id:"default-2",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"undefined\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-2",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<bim-number-input max="100"></bim-number-input>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const numberInput = document.createElement('bim-number-input');\r\nnumberInput.max = 100;\r\ndocument.body.appendChild(numberInput);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"min",children:"min?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"min"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"min"})," property defines the minimum value that can be entered in the number input component.\r\nIt is used to validate the input and ensure that the value does not go below this minimum.\r\nWhen the property changes, the component enforces the new minimum value."]}),"\n",(0,s.jsx)(n.h4,{id:"default-3",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"undefined\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-3",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<bim-number-input min="0"></bim-number-input>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const numberInput = document.createElement('bim-number-input');\r\nnumberInput.min = 0;\r\ndocument.body.appendChild(numberInput);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"name",children:"name?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"name"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"name"})," property is used to specify the name of the number input component.\r\nThis can be useful for identifying the component in forms or JavaScript.\r\nWhen the property changes, it updates the component's attribute to reflect the new name."]}),"\n",(0,s.jsx)(n.h4,{id:"default-4",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"undefined\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-4",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<bim-number-input name="age"></bim-number-input>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const numberInput = document.createElement('bim-number-input');\r\nnumberInput.name = 'age';\r\ndocument.body.appendChild(numberInput);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"implementation-of-1",children:"Implementation of"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"HasName.name"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"pref",children:"pref?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"pref"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"pref"})," property is used to specify a prefix for the value in the number input component.\r\nThis could be a currency symbol, a unit, or any other kind of prefix. The prefix is displayed\r\ninside the input field before the value. When the property changes, the displayed prefix updates accordingly."]}),"\n",(0,s.jsx)(n.h4,{id:"default-5",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"undefined\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-5",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<bim-number-input pref="$"></bim-number-input>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const numberInput = document.createElement('bim-number-input');\r\nnumberInput.pref = '$';\r\ndocument.body.appendChild(numberInput);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"sensitivity",children:"sensitivity?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"sensitivity"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"sensitivity"})," property affects how sensitive the slider is to mouse movements when adjusting\r\nthe value. A higher sensitivity means smaller movements are needed to change the value. This property\r\nis particularly relevant when the ",(0,s.jsx)(n.code,{children:"slider"})," property is enabled. Changes to this property adjust how\r\nthe slider responds to input."]}),"\n",(0,s.jsx)(n.h4,{id:"default-6",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"undefined\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-6",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<bim-number-input sensitivity="10"></bim-number-input>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const numberInput = document.createElement('bim-number-input');\r\nnumberInput.sensitivity = 10;\r\ndocument.body.appendChild(numberInput);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"slider",children:"slider"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"slider"}),": ",(0,s.jsx)(n.code,{children:"boolean"})," = ",(0,s.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"slider"})," property enables a slider interface for the number input component, allowing users\r\nto adjust the value by dragging the slider. When enabled, it changes the component's UI to include\r\na slider. When the property changes, the component toggles between a regular input field and a slider view."]}),"\n",(0,s.jsx)(n.h4,{id:"default-7",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"false\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-7",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"<bim-number-input slider></bim-number-input>\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const numberInput = document.createElement('bim-number-input');\r\nnumberInput.slider = true;\r\ndocument.body.appendChild(numberInput);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"step",children:"step?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"step"}),": ",(0,s.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"step"})," property determines the amount by which the value should increase or decrease\r\nwhen the user interacts with the component's stepping mechanism. It is used for incremental\r\nchanges to the value. When the property changes, the step size for value changes is updated."]}),"\n",(0,s.jsx)(n.h4,{id:"default-8",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"undefined\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-8",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<bim-number-input step="5"></bim-number-input>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const numberInput = document.createElement('bim-number-input');\r\nnumberInput.step = 5;\r\ndocument.body.appendChild(numberInput);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"suffix",children:"suffix?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"optional"})," ",(0,s.jsx)(n.strong,{children:"suffix"}),": ",(0,s.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"suffix"})," property is used to specify a suffix for the value in the number input component.\r\nSimilar to the ",(0,s.jsx)(n.code,{children:"pref"})," property, but the suffix is displayed after the value. It could be a unit of measure,\r\na percentage symbol, etc. When the property changes, the displayed suffix updates accordingly."]}),"\n",(0,s.jsx)(n.h4,{id:"default-9",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"undefined\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-9",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<bim-number-input suffix="%"></bim-number-input>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const numberInput = document.createElement('bim-number-input');\r\nnumberInput.suffix = '%';\r\ndocument.body.appendChild(numberInput);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"vertical",children:"vertical"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"vertical"}),": ",(0,s.jsx)(n.code,{children:"boolean"})," = ",(0,s.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"vertical"})," property indicates whether the slider (if enabled) should be displayed vertically.\r\nThis can affect the layout and behavior of the slider component within the number input.\r\nWhen the property changes, the orientation of the slider adjusts accordingly."]}),"\n",(0,s.jsx)(n.h4,{id:"default-10",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"false\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-10",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"<bim-number-input vertical></bim-number-input>\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const numberInput = document.createElement('bim-number-input');\r\nnumberInput.vertical = true;\r\ndocument.body.appendChild(numberInput);\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"styles",children:"styles"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"static"})," ",(0,s.jsx)(n.strong,{children:"styles"}),": ",(0,s.jsx)(n.code,{children:"CSSResult"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"CSS styles for the component."}),"\n",(0,s.jsx)(n.h4,{id:"overrides",children:"Overrides"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"LitElement.styles"})}),"\n",(0,s.jsx)(n.h2,{id:"accessors",children:"Accessors"}),"\n",(0,s.jsx)(n.h3,{id:"value",children:"value"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"set"})," ",(0,s.jsx)(n.strong,{children:"value"}),"(",(0,s.jsx)(n.code,{children:"data"}),"): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"value"})," property represents the current value of the number input component.\r\nIt is a crucial property that holds the actual number input by the user or set programmatically.\r\nChanges to this property update the displayed value in the component and can trigger validation\r\nagainst the ",(0,s.jsx)(n.code,{children:"min"})," and ",(0,s.jsx)(n.code,{children:"max"})," properties if they are set."]}),"\n",(0,s.jsx)(n.h4,{id:"default-11",children:"Default"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"0\n"})}),"\n",(0,s.jsx)(n.h4,{id:"examples-11",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'<bim-number-input value="10"></bim-number-input>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const numberInput = document.createElement('bim-number-input');\r\nnumberInput.value = 10;\r\ndocument.body.appendChild(numberInput);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Parameter"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"data"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"number"})})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h3,{id:"focus",children:"focus()"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"focus"}),"(): ",(0,s.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Sets focus to the input element of the number input component.\r\nThis method is useful for programmatically focusing the input element, for example,\r\nin response to a user action or to emphasize the input in the UI."}),"\n",(0,s.jsx)(n.p,{children:"If the input element reference is not available (not yet rendered or disconnected),\r\nthis method will do nothing."}),"\n",(0,s.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"void"})}),"\n",(0,s.jsx)(n.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"LitElement.focus"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>d});var s=l(6540);const i={},t=s.createContext(i);function r(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);