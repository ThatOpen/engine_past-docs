"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[9922],{3925:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(4848),s=t(8453);const o={},c="IfcPropertyRule",i={id:"api/@thatopen/components/interfaces/IfcPropertyRule",title:"IfcPropertyRule",description:"A rule for the IfcFinder to search items based on the properties defined in their property sets.",source:"@site/docs/api/@thatopen/components/interfaces/IfcPropertyRule.md",sourceDirName:"api/@thatopen/components/interfaces",slug:"/api/@thatopen/components/interfaces/IfcPropertyRule",permalink:"/engine_past-docs/3.0.x/api/@thatopen/components/interfaces/IfcPropertyRule",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IfcOperatorRule",permalink:"/engine_past-docs/3.0.x/api/@thatopen/components/interfaces/IfcOperatorRule"},next:{title:"MeasureEdge",permalink:"/engine_past-docs/3.0.x/api/@thatopen/components/interfaces/MeasureEdge"}},a={},p=[{value:"Properties",id:"properties",level:2},{value:"name",id:"name",level:3},{value:"type",id:"type",level:3},{value:"value",id:"value",level:3}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"ifcpropertyrule",children:"IfcPropertyRule"}),"\n",(0,r.jsxs)(n.p,{children:["A rule for the ",(0,r.jsx)(n.a,{href:"/engine_past-docs/3.0.x/api/@thatopen/components/classes/IfcFinder",children:"IfcFinder"})," to search items based on the properties defined in their property sets."]}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(n.h3,{id:"name",children:"name"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"name"}),": ",(0,r.jsx)(n.code,{children:"RegExp"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'The name of the property. It\'s a regular expression, so you can make complex queries and use ".*" to match all names.'}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"type",children:"type"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"type"}),": ",(0,r.jsx)(n.code,{children:'"property"'})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The type of this rule. All rules have a fixed type."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"value",children:"value"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"value"}),": ",(0,r.jsx)(n.code,{children:"RegExp"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'The value of the property. It\'s a regular expression, so you can make complex queries and use ".*" to match all values.'})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var r=t(6540);const s={},o=r.createContext(s);function c(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);