"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[3766],{1386:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=t(4848),o=t(8453);const s={},i=void 0,a={id:"Tutorials/Components/Core/Hider",title:"Hider",description:'window.open("https://thatopen.github.io/engine_components/examples/Hider")} >Go Full Screen',source:"@site/docs/Tutorials/Components/Core/Hider.mdx",sourceDirName:"Tutorials/Components/Core",slug:"/Tutorials/Components/Core/Hider",permalink:"/engine_past-docs/3.0.x/Tutorials/Components/Core/Hider",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Grids",permalink:"/engine_past-docs/3.0.x/Tutorials/Components/Core/Grids"},next:{title:"IfcFinder",permalink:"/engine_past-docs/3.0.x/Tutorials/Components/Core/IfcFinder"}},l={},c=[{value:"\ud83d\udc53 Making things invisible",id:"-making-things-invisible",level:3},{value:"\ud83c\udf0e Setting up a simple scene",id:"-setting-up-a-simple-scene",level:3},{value:"\ud83d\udd0e Custom filters for your BIM models",id:"-custom-filters-for-your-bim-models",level:3},{value:"\ud83d\udcd5\ud83d\udcd7\ud83d\udcd8 Setting up simple filters",id:"-setting-up-simple-filters",level:3},{value:"\u23f1\ufe0f Measuring the performance (optional)",id:"\ufe0f-measuring-the-performance-optional",level:3},{value:"\ud83e\udde9 Adding some UI",id:"-adding-some-ui",level:3},{value:"\ud83c\udf89 Wrap up",id:"-wrap-up",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("div",{style:{position:"relative"},children:[(0,r.jsx)("iframe",{src:"https://thatopen.github.io/engine_components/examples/Hider"}),(0,r.jsx)("button",{class:"full-screen-btn",onClick:()=>window.open("https://thatopen.github.io/engine_components/examples/Hider"),children:"Go Full Screen"})]}),"\n",(0,r.jsx)(n.admonition,{title:"Source",type:"info",children:(0,r.jsxs)(n.p,{children:["Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,r.jsx)(n.a,{href:"https://github.com/ThatOpen/engine_components/blob/e444737d33d6823121001fd63a06bdcf80cf5ddd/packages/core/src/fragments/Hider/example.ts",children:"here"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"-making-things-invisible",children:"\ud83d\udc53 Making things invisible"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, you'll learn how control the visibility of the items of a BIM model."}),"\n",(0,r.jsx)(n.admonition,{title:"Why make things invisible?",type:"tip",children:(0,r.jsx)(n.p,{children:"Many times, we just want to look at a specific part of a BIM model, without seeing the rest of it. BIM models are complex, and finding what we are looking for is not always easy. Luckily, the components library has tools to make it easier!"})}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, we will import:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@thatopen/ui"})," to add some simple and cool UI menus."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"web-ifc"})," to get some IFC items."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@thatopen/components"})," to set up the barebone of our app."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Stats.js"})," (optional) to measure the performance of our app."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import Stats from "stats.js";\r\nimport * as BUI from "@thatopen/ui";\r\nimport * as WEBIFC from "web-ifc";\r\nimport * as OBC from "@thatopen/components";\n'})}),"\n",(0,r.jsx)(n.h3,{id:"-setting-up-a-simple-scene",children:"\ud83c\udf0e Setting up a simple scene"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"We will start by creating a simple scene with a camera and a renderer. If you don't know how to set up a scene, you can check the Worlds tutorial."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const container = document.getElementById("container")!;\r\n\r\nconst components = new OBC.Components();\r\n\r\nconst worlds = components.get(OBC.Worlds);\r\n\r\nconst world = worlds.create<\r\n  OBC.SimpleScene,\r\n  OBC.SimpleCamera,\r\n  OBC.SimpleRenderer\r\n>();\r\n\r\nworld.scene = new OBC.SimpleScene(components);\r\nworld.renderer = new OBC.SimpleRenderer(components, container);\r\nworld.camera = new OBC.SimpleCamera(components);\r\n\r\ncomponents.init();\r\n\r\nworld.camera.controls.setLookAt(12, 6, 8, 0, 0, -10);\r\n\r\nworld.scene.setup();\r\n\r\nconst grids = components.get(OBC.Grids);\r\ngrids.create(world);\n'})}),"\n",(0,r.jsx)(n.p,{children:"We'll make the background of the scene transparent so that it looks good in our docs page, but you don't have to do that in your app!"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"world.scene.three.background = null;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"-custom-filters-for-your-bim-models",children:"\ud83d\udd0e Custom filters for your BIM models"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["First, let's start by creating a ",(0,r.jsx)(n.code,{children:"FragmentManager"})," instance and\r\nloading a simple fragment. If you haven't checked out the tutorial\r\nfor that component yet, do it before going forward!"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const fragments = components.get(OBC.FragmentsManager);\r\nconst file = await fetch(\r\n  "https://thatopen.github.io/engine_components/resources/small.frag",\r\n);\r\nconst data = await file.arrayBuffer();\r\nconst buffer = new Uint8Array(data);\r\nconst model = fragments.load(buffer);\r\nworld.scene.three.add(model);\r\n\r\nconst properties = await fetch(\r\n  "https://thatopen.github.io/engine_components/resources/small.json",\r\n);\r\nmodel.setLocalProperties(await properties.json());\r\n\r\nconst indexer = components.get(OBC.IfcRelationsIndexer);\r\nconst relationsFile = await fetch(\r\n  "https://thatopen.github.io/engine_components/resources/small-relations.json",\r\n);\r\nconst relations = indexer.getRelationsMapFromJSON(await relationsFile.text());\r\nindexer.setRelationMap(model, relations);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now that we have our model, let's start the ",(0,r.jsx)(n.code,{children:"FragmentHider"}),". You\r\ncan use the ",(0,r.jsx)(n.code,{children:"loadCached"})," method if you had used it before: it will\r\nautomatically load all the filters you created in previous sessions,\r\neven after closing the browser and opening it again:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const hider = components.get(OBC.Hider);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"-setting-up-simple-filters",children:"\ud83d\udcd5\ud83d\udcd7\ud83d\udcd8 Setting up simple filters"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["Next, we will classify data by category and by level using the ",(0,r.jsx)(n.code,{children:"Classifier"}),". This will allow us to create a simple filter for both classifications."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const classifier = components.get(OBC.Classifier);\r\nclassifier.byEntity(model);\r\nawait classifier.bySpatialStructure(model, {\r\n  isolate: new Set([WEBIFC.IFCBUILDINGSTOREY]),\r\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"\ufe0f-measuring-the-performance-optional",children:"\u23f1\ufe0f Measuring the performance (optional)"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["We'll use the ",(0,r.jsx)(n.a,{href:"https://github.com/mrdoob/stats.js",children:"Stats.js"})," to measure the performance of our app. We will add it to the top left corner of the viewport. This way, we'll make sure that the memory consumption and the FPS of our app are under control."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const stats = new Stats();\r\nstats.showPanel(2);\r\ndocument.body.append(stats.dom);\r\nstats.dom.style.left = "0px";\r\nstats.dom.style.zIndex = "unset";\r\nworld.renderer.onBeforeUpdate.add(() => stats.begin());\r\nworld.renderer.onAfterUpdate.add(() => stats.end());\n'})}),"\n",(0,r.jsx)(n.h3,{id:"-adding-some-ui",children:"\ud83e\udde9 Adding some UI"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["We will use the ",(0,r.jsx)(n.code,{children:"@thatopen/ui"})," library to add some simple and cool UI elements to our app. First, we need to call the ",(0,r.jsx)(n.code,{children:"init"})," method of the ",(0,r.jsx)(n.code,{children:"BUI.Manager"})," class to initialize the library:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"BUI.Manager.init();\n"})}),"\n",(0,r.jsx)(n.p,{children:"Next, we will create a simple object that we will use as the base for the floors filter. It will just be an object with the name of each storey as key and a boolean (true/false) as value:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const spatialStructures: Record<string, any> = {};\r\nconst structureNames = Object.keys(classifier.list.spatialStructures);\r\nfor (const name of structureNames) {\r\n  spatialStructures[name] = true;\r\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now, let's do the same for categories:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const classes: Record<string, any> = {};\r\nconst classNames = Object.keys(classifier.list.entities);\r\nfor (const name of classNames) {\r\n  classes[name] = true;\r\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Now we will add some UI to control the visibility of items per category and per floor using simple checkboxes. For more information about the UI library, you can check the specific documentation for it!"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const panel = BUI.Component.create<BUI.PanelSection>(() => {\r\n  return BUI.html`\r\n    <bim-panel active label="Hider Tutorial" class="options-menu">\r\n      <bim-panel-section collapsed label="Controls">\r\n      \r\n      <bim-panel-section collapsed label="Floors" name="Floors"">\r\n      </bim-panel-section>\r\n      \r\n      <bim-panel-section collapsed label="Categories" name="Categories"">\r\n      </bim-panel-section>\r\n      \r\n    </bim-panel>\r\n  `;\r\n});\r\n\r\ndocument.body.append(panel);\r\n\r\nconst floorSection = panel.querySelector(\r\n  "bim-panel-section[name=\'Floors\']",\r\n) as BUI.PanelSection;\r\n\r\nconst categorySection = panel.querySelector(\r\n  "bim-panel-section[name=\'Categories\']",\r\n) as BUI.PanelSection;\r\n\r\nfor (const name in spatialStructures) {\r\n  const panel = BUI.Component.create<BUI.Checkbox>(() => {\r\n    return BUI.html`\r\n      <bim-checkbox checked label="${name}"\r\n        @change="${({ target }: { target: BUI.Checkbox }) => {\r\n          const found = classifier.list.spatialStructures[name];\r\n          if (found && found.id !== null) {\r\n            for (const [_id, model] of fragments.groups) {\r\n              const foundIDs = indexer.getEntityChildren(model, found.id);\r\n              const fragMap = model.getFragmentMap(foundIDs);\r\n              hider.set(target.value, fragMap);\r\n            }\r\n          }\r\n        }}">\r\n      </bim-checkbox>\r\n    `;\r\n  });\r\n  floorSection.append(panel);\r\n}\r\n\r\nfor (const name in classes) {\r\n  const checkbox = BUI.Component.create<BUI.Checkbox>(() => {\r\n    return BUI.html`\r\n      <bim-checkbox checked label="${name}"\r\n        @change="${({ target }: { target: BUI.Checkbox }) => {\r\n          const found = classifier.find({ entities: [name] });\r\n          hider.set(target.value, found);\r\n        }}">\r\n      </bim-checkbox>\r\n    `;\r\n  });\r\n  categorySection.append(checkbox);\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"And we will make some logic that adds a button to the screen when the user is visiting our app from their phone, allowing to show or hide the menu. Otherwise, the menu would make the app unusable."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const button = BUI.Component.create<BUI.PanelSection>(() => {\r\n  return BUI.html`\r\n      <bim-button class="phone-menu-toggler" icon="solar:settings-bold"\r\n        @click="${() => {\r\n          if (panel.classList.contains("options-menu-visible")) {\r\n            panel.classList.remove("options-menu-visible");\r\n          } else {\r\n            panel.classList.add("options-menu-visible");\r\n          }\r\n        }}">\r\n      </bim-button>\r\n    `;\r\n});\r\n\r\ndocument.body.append(button);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"-wrap-up",children:"\ud83c\udf89 Wrap up"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"That's it! You have created an app with an UI that allows the user to control the visibility of items in a BIM model by floor and by category. Well done!"})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);