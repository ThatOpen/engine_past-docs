"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[4556],{1230:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=t(4848),s=t(8453);const r={},a=void 0,i={id:"Tutorials/Components/Front/PostproductionRenderer",title:"PostproductionRenderer",description:'window.open("https://thatopen.github.io/engine_components/examples/PostproductionRenderer")} >Go Full Screen',source:"@site/docs/Tutorials/Components/Front/PostproductionRenderer.mdx",sourceDirName:"Tutorials/Components/Front",slug:"/Tutorials/Components/Front/PostproductionRenderer",permalink:"/3.0.x/Tutorials/Components/Front/PostproductionRenderer",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Plans",permalink:"/3.0.x/Tutorials/Components/Front/Plans"},next:{title:"Sections",permalink:"/3.0.x/Tutorials/Components/Front/Sections"}},l={},c=[{value:"\ud83c\udfa5 Great graphics",id:"-great-graphics",level:3},{value:"\ud83c\udf0e Setting up a simple scene",id:"-setting-up-a-simple-scene",level:3},{value:"\ud83e\uddf3 Loading a BIM model",id:"-loading-a-bim-model",level:3},{value:"\ud83c\udfac Turning on the Postproduction",id:"-turning-on-the-postproduction",level:3},{value:"\u23f1\ufe0f Measuring the performance (optional)",id:"\ufe0f-measuring-the-performance-optional",level:3},{value:"\ud83e\udde9 Adding some UI",id:"-adding-some-ui",level:3},{value:"\ud83c\udf89 Wrap up",id:"-wrap-up",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)("div",{style:{position:"relative"},children:[(0,o.jsx)("iframe",{src:"https://thatopen.github.io/engine_components/examples/PostproductionRenderer"}),(0,o.jsx)("button",{class:"full-screen-btn",onClick:()=>window.open("https://thatopen.github.io/engine_components/examples/PostproductionRenderer"),children:"Go Full Screen"})]}),"\n",(0,o.jsx)(n.admonition,{title:"Source",type:"info",children:(0,o.jsxs)(n.p,{children:["Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,o.jsx)(n.a,{href:"https://github.com/ThatOpen/engine_components/blob/e444737d33d6823121001fd63a06bdcf80cf5ddd/packages/front/src/core/PostproductionRenderer/example.ts",children:"here"}),"."]})}),"\n",(0,o.jsx)(n.h3,{id:"-great-graphics",children:"\ud83c\udfa5 Great graphics"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"Postproduction effects enrich your 3D scenes. There are several post-production effects, such as adding shadows, rendering outlines, adding ambient occlusion and applying bloom, that can enhance and make your scene look cool. In this tutorial, you'll learn how to do it."}),"\n",(0,o.jsx)(n.admonition,{title:"Postproduction?",type:"tip",children:(0,o.jsx)(n.p,{children:"The simple Three.js renderer isn't bad, but it's pretty basic. Postproduction are a collection of effects you can add to your scene to make it look much better. Of course, this means consuming more resources, but luckily for us, the power of devices is proportional to the size of its screen, so we should be able to enjoy this beauty in most scene even from our smartphones!"})}),"\n",(0,o.jsx)(n.p,{children:"In this tutorial, we will import:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"three"})," to create some 3D items."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@thatopen/components"})," to set up the barebone of our app."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@thatopen/ui"})," to add some simple and cool UI menus."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"@thatopen/components-front"})," to use some frontend-oriented components."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Stats.js"})," (optional) to measure the performance of our app."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import * as THREE from "three";\nimport Stats from "stats.js";\nimport * as BUI from "@thatopen/ui";\nimport * as OBC from "@thatopen/components";\nimport * as OBCF from "@thatopen/components-front";\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-setting-up-a-simple-scene",children:"\ud83c\udf0e Setting up a simple scene"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"We will start by creating a simple scene with a camera and a renderer. If you don't know how to set up a scene, you can check the Worlds tutorial. Notice how we use the PostproductionRenderer in this case."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const container = document.getElementById("container")!;\n\nconst components = new OBC.Components();\n\nconst worlds = components.get(OBC.Worlds);\n\nconst world = worlds.create<\n  OBC.SimpleScene,\n  OBC.SimpleCamera,\n  OBCF.PostproductionRenderer\n>();\n\nworld.scene = new OBC.SimpleScene(components);\nworld.renderer = new OBCF.PostproductionRenderer(components, container);\nworld.camera = new OBC.SimpleCamera(components);\n\nworld.scene.three.background = null;\n\ncomponents.init();\n\nworld.camera.controls.setLookAt(12, 6, 8, 0, 0, -10);\n\nworld.scene.setup();\n\nconst grids = components.get(OBC.Grids);\nconst grid = grids.create(world);\ngrid.config.color.set(0x666666);\n'})}),"\n",(0,o.jsx)(n.p,{children:"We'll make the background of the scene transparent so that it looks good in our docs page, but you don't have to do that in your app!"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"world.scene.three.background = null;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-loading-a-bim-model",children:"\ud83e\uddf3 Loading a BIM model"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"We'll start by adding a BIM model to our scene. That model is already converted to fragments, so it will load much faster than if we loaded the IFC file."}),"\n",(0,o.jsx)(n.admonition,{title:"Fragments?",type:"tip",children:(0,o.jsx)(n.p,{children:"If you are not familiar with fragments, check out the IfcLoader tutorial!"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const fragments = new OBC.FragmentsManager(components);\nconst file = await fetch(\n  "https://thatopen.github.io/engine_components/resources/small.frag",\n);\nconst data = await file.arrayBuffer();\nconst buffer = new Uint8Array(data);\nconst model = fragments.load(buffer);\nworld.scene.three.add(model);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-turning-on-the-postproduction",children:"\ud83c\udfac Turning on the Postproduction"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"Now we will activate the postproduction effect and enable the visibility for postproduction layer."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const { postproduction } = world.renderer;\npostproduction.enabled = true;\npostproduction.customEffects.excludedMeshes.push(grid.three);\nconst ao = postproduction.n8ao.configuration;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"\ufe0f-measuring-the-performance-optional",children:"\u23f1\ufe0f Measuring the performance (optional)"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:["We'll use the ",(0,o.jsx)(n.a,{href:"https://github.com/mrdoob/stats.js",children:"Stats.js"})," to measure the performance of our app. We will add it to the top left corner of the viewport. This way, we'll make sure that the memory consumption and the FPS of our app are under control."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const stats = new Stats();\nstats.showPanel(2);\ndocument.body.append(stats.dom);\nstats.dom.style.left = "0px";\nstats.dom.style.zIndex = "unset";\nworld.renderer.onBeforeUpdate.add(() => stats.begin());\nworld.renderer.onAfterUpdate.add(() => stats.end());\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-adding-some-ui",children:"\ud83e\udde9 Adding some UI"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:["We will use the ",(0,o.jsx)(n.code,{children:"@thatopen/ui"})," library to add some simple and cool UI elements to our app. First, we need to call the ",(0,o.jsx)(n.code,{children:"init"})," method of the ",(0,o.jsx)(n.code,{children:"BUI.Manager"})," class to initialize the library:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"BUI.Manager.init();\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now we will add some UI to control some of the most common postproduction parameters. For more information about the UI library, you can check the specific documentation for it!"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const panel = BUI.Component.create<BUI.PanelSection>(() => {\n  return BUI.html`\n  <bim-panel active label="Postproduction Tutorial" class="options-menu">\n      <bim-panel-section collapsed label="Gamma">\n        <bim-checkbox checked label="Gamma Correction"\n          @change="${({ target }: { target: BUI.Checkbox }) => {\n            postproduction.setPasses({ gamma: target.value });\n          }}">\n        </bim-checkbox>\n      </bim-panel-section>\n      \n      <bim-panel-section collapsed label="Custom effects" >\n        <bim-checkbox checked label="Custom effects"\n          @change="${({ target }: { target: BUI.Checkbox }) => {\n            postproduction.setPasses({ custom: target.value });\n          }}">\n        </bim-checkbox>    \n        \n        <bim-checkbox checked label="Gamma Correction"\n          @change="${({ target }: { target: BUI.Checkbox }) => {\n            postproduction.customEffects.glossEnabled = target.value;\n          }}">\n        </bim-checkbox>   \n      \n        <bim-number-input \n          slider step="0.01" label="Opacity" \n          value="${postproduction.customEffects.opacity}" min="0" max="1"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            postproduction.customEffects.opacity = target.value;\n          }}">\n        </bim-number-input>  \n            \n        <bim-number-input \n          slider step="0.1" label="Tolerance" \n          value="${postproduction.customEffects.tolerance}" min="0" max="6"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            postproduction.customEffects.tolerance = target.value;\n          }}">\n        </bim-number-input> \n                      \n        <bim-color-input label="Line color" \n          @input="${({ target }: { target: BUI.ColorInput }) => {\n            const color = new THREE.Color(target.value.color);\n            postproduction.customEffects.lineColor = color.getHex();\n          }}">\n        </bim-color-input>  \n      \n        <bim-number-input \n          slider label="Gloss exponent" step="0.1" \n          value="${postproduction.customEffects.glossExponent}" min="0" max="5"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            postproduction.customEffects.glossExponent = target.value;\n          }}">\n        </bim-number-input>    \n           \n        <bim-number-input \n          slider label="Max gloss" step="0.05" \n          value="${postproduction.customEffects.maxGloss}" min="-2" max="2"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            postproduction.customEffects.maxGloss = target.value;\n          }}">\n        </bim-number-input>  \n                  \n        <bim-number-input \n          slider label="Min gloss" step="0.05" \n          value="${postproduction.customEffects.minGloss}" min="-2" max="2"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            postproduction.customEffects.minGloss = target.value;\n          }}">\n        </bim-number-input> \n        \n      </bim-panel-section>\n      \n      <bim-panel-section collapsed label="Ambient Oclussion">\n      \n        <bim-checkbox label="AO enabled"\n          @change="${({ target }: { target: BUI.Checkbox }) => {\n            postproduction.setPasses({ ao: target.value });\n          }}">\n        </bim-checkbox>  \n                \n        <bim-checkbox checked label="Half resolution"\n          @change="${({ target }: { target: BUI.Checkbox }) => {\n            ao.halfRes = target.value;\n          }}">\n        </bim-checkbox>  \n                      \n        <bim-checkbox label="Screen space radius"\n          @change="${({ target }: { target: BUI.Checkbox }) => {\n            ao.screenSpaceRadius = target.value;\n          }}">\n        </bim-checkbox>\n        \n                              \n        <bim-color-input label="AO color" \n          @input="${({ target }: { target: BUI.ColorInput }) => {\n            const color = new THREE.Color(target.value.color);\n            ao.color.r = color.r;\n            ao.color.g = color.g;\n            ao.color.b = color.b;\n          }}">\n        </bim-color-input>     \n        \n        <bim-number-input \n          slider label="AO Samples" step="1" \n          value="${ao.aoSamples}" min="1" max="16"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            ao.aoSamples = target.value;\n          }}">\n        </bim-number-input>    \n            \n        <bim-number-input \n          slider label="Denoise Samples" step="1" \n          value="${ao.denoiseSamples}" min="1" max="16"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            ao.denoiseSamples = target.value;\n          }}">\n        </bim-number-input>   \n                  \n        <bim-number-input \n          slider label="Denoise Radius" step="1" \n          value="${ao.denoiseRadius}" min="0" max="100"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            ao.denoiseRadius = target.value;\n          }}">\n        </bim-number-input>   \n                       \n        <bim-number-input \n          slider label="AO Radius" step="1" \n          value="${ao.aoRadius}" min="0" max="16"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            ao.aoRadius = target.value;\n          }}">\n        </bim-number-input>  \n                              \n        <bim-number-input \n          slider label="Distance falloff" step="1" \n          value="${ao.distanceFalloff}" min="0" max="16"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            ao.distanceFalloff = target.value;\n          }}">\n        </bim-number-input> \n                                      \n        <bim-number-input \n          slider label="Intensity" step="1" \n          value="${ao.intensity}" min="0" max="16"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            ao.intensity = target.value;\n          }}">\n        </bim-number-input> \n        \n      </bim-panel-section>\n      \n    </bim-panel>\n    `;\n});\n\ndocument.body.append(panel);\n'})}),"\n",(0,o.jsx)(n.p,{children:"And we will make some logic that adds a button to the screen when the user is visiting our app from their phone, allowing to show or hide the menu. Otherwise, the menu would make the app unusable."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const button = BUI.Component.create<BUI.PanelSection>(() => {\n  return BUI.html`\n      <bim-button class="phone-menu-toggler" icon="solar:settings-bold"\n        @click="${() => {\n          if (panel.classList.contains("options-menu-visible")) {\n            panel.classList.remove("options-menu-visible");\n          } else {\n            panel.classList.add("options-menu-visible");\n          }\n        }}">\n      </bim-button>\n    `;\n});\n\ndocument.body.append(button);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-wrap-up",children:"\ud83c\udf89 Wrap up"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"That's it! You have created an app that looks great thanks to postproduction and exposes a menu to allow the user control it in real time."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(6540);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);