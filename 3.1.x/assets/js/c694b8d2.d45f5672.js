"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[4159],{8728:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var t=a(4848),o=a(8453);const s={},i=void 0,r={id:"Tutorials/UserInterface/Core/Table/DataTransform",title:"DataTransform",description:'window.open("https://thatopen.github.io/engine_ui-components/examples/Table/DataTransform")} >Go Full Screen',source:"@site/docs/Tutorials/UserInterface/Core/Table/DataTransform.mdx",sourceDirName:"Tutorials/UserInterface/Core/Table",slug:"/Tutorials/UserInterface/Core/Table/DataTransform",permalink:"/engine_past-docs/3.1.x/Tutorials/UserInterface/Core/Table/DataTransform",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Table",permalink:"/engine_past-docs/3.1.x/Tutorials/UserInterface/Core/Table/"},next:{title:"ExportingData",permalink:"/engine_past-docs/3.1.x/Tutorials/UserInterface/Core/Table/ExportingData"}},l={},d=[{value:"Displaying Data the Advanced Way \ud83d\ude80",id:"displaying-data-the-advanced-way-",level:3},{value:"\ud83d\udd96 Initializing the Library and Setting some Data",id:"-initializing-the-library-and-setting-some-data",level:3},{value:"\ud83d\udd22 Creating the Tables and Transforming the Data",id:"-creating-the-tables-and-transforming-the-data",level:3},{value:"\ud83d\udd17 Putting Everything Together",id:"-putting-everything-together",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)("div",{style:{position:"relative"},children:[(0,t.jsx)("iframe",{src:"https://thatopen.github.io/engine_ui-components/examples/Table/DataTransform"}),(0,t.jsx)("button",{class:"full-screen-btn",onClick:()=>window.open("https://thatopen.github.io/engine_ui-components/examples/Table/DataTransform"),children:"Go Full Screen"})]}),"\n",(0,t.jsx)(n.admonition,{title:"Source",type:"info",children:(0,t.jsxs)(n.p,{children:["Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,t.jsx)(n.a,{href:"https://github.com/ThatOpen/engine_ui-components/blob/eb08de2cf9758deff42b844673f979eeea603600/packages/core/src/components/Table/examples/DataTransform/example.ts",children:"here"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"displaying-data-the-advanced-way-",children:"Displaying Data the Advanced Way \ud83d\ude80"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:["Sooner than later you will need a way to manipulate your table data such that is displayed diferently in the cell; for example, what happens if you want to display a value always upper-cassed? Or display a number with its units without converting the number into a string? Or set some custom styling for the cell's value? Or include any other HTMLElement in the cell? Well, for all those questions there is a simple answer: ",(0,t.jsx)(n.code,{children:"table.dataTransform"}),". Let's see how is used so you display data the advanced way!"]}),"\n",(0,t.jsx)(n.h3,{id:"-initializing-the-library-and-setting-some-data",children:"\ud83d\udd96 Initializing the Library and Setting some Data"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"As always, let's first initialize the UI library. Remember you only have to do it once in your entire app."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// You have to import from "@thatopen/ui"\nimport * as BUI from "../../../..";\n\nBUI.Manager.init();\n'})}),"\n",(0,t.jsx)(n.p,{children:"Before creating the table, and in order to illustrate the difference between a table that applies data transform and other that doesn't, let's define the data outside and use it in two different tables:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'type IfcElementsInfo = {\n  Class: "IfcWall" | "IfcDoor" | "IfcWindow" | "IfcColumn" | "IfcSlab";\n  PredefinedType: string;\n  Name: string;\n  Description: string;\n  LoadBearing: boolean;\n  Area: number;\n};\n\nconst data: BUI.TableGroupData<IfcElementsInfo>[] = [\n  {\n    data: {\n      Class: "IfcWall",\n      PredefinedType: "EXTERNAL",\n      Name: "Exterior Wall",\n      Description: "Main structural exterior wall",\n      LoadBearing: true,\n      Area: 45.5,\n    },\n  },\n  {\n    data: {\n      Class: "IfcDoor",\n      PredefinedType: "SINGLE_SWING_RIGHT",\n      Name: "Entrance Door",\n      Description: "Main entrance door",\n      LoadBearing: false,\n      Area: 2.1,\n    },\n  },\n  {\n    data: {\n      Class: "IfcWindow",\n      PredefinedType: "STANDARD",\n      Name: "Office Window",\n      Description: "Double-pane office window",\n      LoadBearing: false,\n      Area: 3.6,\n    },\n  },\n  {\n    data: {\n      Class: "IfcColumn",\n      PredefinedType: "ROUND",\n      Name: "Support Column",\n      Description: "Load-bearing column in lobby",\n      LoadBearing: true,\n      Area: 1.2,\n    },\n  },\n  {\n    data: {\n      Class: "IfcSlab",\n      PredefinedType: "FLOOR",\n      Name: "Main Floor Slab",\n      Description: "Primary floor slab for ground level",\n      LoadBearing: true,\n      Area: 150.0,\n    },\n  },\n];\n'})}),"\n",(0,t.jsx)(n.h3,{id:"-creating-the-tables-and-transforming-the-data",children:"\ud83d\udd22 Creating the Tables and Transforming the Data"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"As we already have some data to play with, let's create two tables with the same information:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const simpleTable = document.createElement(\n  "bim-table",\n) as BUI.Table<IfcElementsInfo>;\n\nsimpleTable.data = data;\n\nconst advancedTable = document.createElement(\n  "bim-table",\n) as BUI.Table<IfcElementsInfo>;\n\nadvancedTable.data = data;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Let's deal with the data transformation. The whole goal of ",(0,t.jsx)(n.code,{children:"table.dataTransform"})," is to be able to convert each cell value into something else. To do it, you just need to define an optional function per each column. ",(0,t.jsx)(n.strong,{children:"When the table is computing the cell, it runs the function defined for the column and the result is what it renders."})," Let's start by doing a simple conversion to add the units into the area values:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"advancedTable.dataTransform.Area = (value) => `${value} m\xb2`;\n"})}),"\n",(0,t.jsx)(n.p,{children:"As you see, making that conversion is really simple. Here, we defined how each cell in the Area column must be transformed. In this case, we are just taking the same value and adding the corresponding units. What its important here is you are only changing how the data is displayed, but the actual area value remains exactly the same as before: a number without units as it should be. Now, let's go for a slightly more complicated transformation by changing the LoadBearing values with a checkbox:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"advancedTable.dataTransform.LoadBearing = (value, rowData) => {\n  const onChange = (e: Event) => {\n    const input = e.target;\n    if (!(input instanceof BUI.Checkbox)) return;\n    rowData.LoadBearing = input.checked;\n    window.alert(`${rowData.Name} changed to LoadBearing = ${input.checked}`);\n    // For demostration purposes, we request an update to the simpleTable as it is using the same data\n    simpleTable.requestUpdate();\n  };\n\n  return BUI.html`\n   <bim-checkbox @change=${onChange} .checked=${value}></bim-checkbox> \n  `;\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["One of the most wonderful things about ",(0,t.jsx)(n.code,{children:"table.dataTransform"})," is the function you create for the transformation not only let's you return values, but you can also return any valid HTML template using ",(0,t.jsx)(n.code,{children:"@thatopen/ui"})," system! In this case, we just returned a checkbox even with functionality! Also, notice the second argument in the transform function gives you access to the whole row data. In this case we used ",(0,t.jsx)(n.code,{children:"rowData"})," to access the element ",(0,t.jsx)(n.code,{children:"Name"})," and also to effectively change the ",(0,t.jsx)(n.code,{children:"LoadBearing"})," value based on the input."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"If you're unsure on how the templating system works, take a look at the UserInterface/Component tutorial."})}),"\n",(0,t.jsxs)(n.p,{children:["Right now you may be wondering: hey, so far we have changed the whole set of cells in a column, but what if I just need to change some? Well, that is as easy as just checking the values in either the cell or the row to conditionally render anything you need. Let's see how is done by styling the ",(0,t.jsx)(n.code,{children:"Class"})," based on its value:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'advancedTable.dataTransform.Class = (value) => {\n  const baseStyle = "padding: 0.125rem 0.375rem; border-radius: 999px";\n  if (value === "IfcDoor" || value === "IfcSlab") {\n    return BUI.html`\n      <bim-label style="${baseStyle}; background-color: #ff000054; color: #d54f4f;">\n        ${value}\n      </bim-label> \n    `;\n  }\n  if (value === "IfcColumn" || value === "IfcWall") {\n    return BUI.html`\n      <bim-label style="${baseStyle}; background-color: #c700ff54; color: #c167da;">\n        ${value}\n      </bim-label> \n    `;\n  }\n  // If the class value is none of the above, just return the same value without any changes.\n  return value;\n};\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["It's really important to know that you can't use CSS classes in the elements you return in the transformation. The details of why is that are beyond the scope of this tutorial, but in a nutshell is because everything in a bim-table (except the slots) are rendered in the ShadowDOM. The ShadowDOM allows to encapsulate styling, so styles in Web Components doesn't affect the styles in the base page. Take a look ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM",children:"here"})," for more info."]})}),"\n",(0,t.jsxs)(n.p,{children:["As a combined example of some of the things above, let's allow the user to change the ",(0,t.jsx)(n.code,{children:"Description"})," only if the ",(0,t.jsx)(n.code,{children:"Class"})," is ",(0,t.jsx)(n.code,{children:"IfcDoor"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'advancedTable.dataTransform.Description = (value, rowData) => {\n  const { Class } = rowData;\n  if (Class === "IfcDoor") {\n    const onInput = (e: InputEvent) => {\n      const input = e.target;\n      if (!(input instanceof BUI.TextInput)) return;\n      rowData.Description = input.value;\n      // Be careful with this type of update requests, as rapidly changing heave tables may decrease app performance\n      // Here we added a debounce in the text-input so the changes only takes effect after some milliseconds.\n      simpleTable.requestUpdate();\n    };\n\n    return BUI.html`\n      <bim-text-input @input=${onInput} value=${value} debounce=350></bim-text-input>\n    `;\n  }\n  return value;\n};\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Needless to say, you can only define one transformation function per each row. So the last you set will prevail."})}),"\n",(0,t.jsx)(n.p,{children:"As you see, the data tranformation is as flexible as you need it to be. Now, one last thing to note is we have defined the dataTransform by parts. However, that was just for demostration purposes; usually, you do it as follows (but is entirely up to you):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// const dataTransform: BUI.TableDataTransform<IfcElementsInfo> = {\n//   Area: /* transform function ,\n//   LoadBearing: /* transform function ,\n//   Class: /* transform function ,\n//   Description: /* transform function ,\n// };\n\n// advancedTable.dataTransform = dataTransform\n"})}),"\n",(0,t.jsx)(n.h3,{id:"-putting-everything-together",children:"\ud83d\udd17 Putting Everything Together"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"As everything is already setup, let's create a new component to hold the tables together and display them in the page. You can do it very easily as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'const appContent = BUI.Component.create(\n  () => BUI.html`\n    <div style="display: flex; flex-direction: column; gap: 0.75rem; height: 100%;">\n      <bim-label style="font-size: 1.375rem; line-height: normal;">Without Data Transform</bim-label>\n      ${simpleTable}\n      <bim-label style="font-size: 1.375rem; line-height: normal;">Data Transform applied!</bim-label>\n      ${advancedTable}\n    </div>\n  `,\n);\n\ndocument.body.append(appContent);\n'})}),"\n",(0,t.jsx)(n.p,{children:"Congratulations! You already know how to use an advanced feature of the bim-table component to display the information exactly how you need it. Don't hesitate into watching more tutorials! \ud83d\ude80"})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var t=a(6540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);